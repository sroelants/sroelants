---
layout: mainlayout.njk
title: Sam Roelants - Projects
section: projects
---
<h1> Projects </h1>
<p>A list of fun things I've gotten up to recently.</p>

<section class="project">
  <h2 class="project__title">Secrets</h2>
  <div class="project__description">
    <p>
      An anonymous message wall where people can share their secrets. Wrote it
      as a single page application with a RESTful api written in Python and 
      Flask.
    </p>
    <ul class="project__list">
      <li><strong>Things I used:</strong> React, Typescript, ES6, Python, Flask</li>
      <li><strong>Things I learned:</strong> Some nifty tricks using React Hooks, 
          found out about the <a href="https://www.samroelants.com/blog/using-the-intersectionobserver-api-with-react-hooks/"> 
      the IntersectionObserver Web API</a>.</li>
    </ul>
    <div class="project__links">
      <div class="project__link">
        <a href="https://sroelants.github.io/secrets" 
           target="_blank" rel="noopener noreferrer">See it in action.</a>
      </div>
      <div class="project__link">
        <a href="https://github.com/sroelants/secrets"
        target="_blank" rel="noopener noreferrer">See the frontend code.</a>
      </div>
      <div class="project__link">
        <a href="https://github.com/sroelants/secrets_api"
        target="_blank" rel="noopener noreferrer">See the backend code.</a>
      </div>
    </div>
  </div>
</section>

<section class="project">
  <h2 class="project__title">Sorted</h2>
  <div class="project__description">
    <p>
      A simple sorting algorithm visualization. Because, sorting algorithms.
      This was mostly a little plaything to see how React and Typescript play 
      together. (Not too badly, it seems.) 
    </p>
    <ul class="project__list">
      <li><strong>Things I used:</strong> React, Typescript, ES6</li>
      <li><strong>Things I learned:</strong> Using javascript generators to their
      full potential, nesting them recursively. I wrote a post about it 
      <a href="http://samroelants.com/blog/recursive-generators-in-javascript/">here</a>.</li>
    </ul>
    <div class="project__links">
      <div class="project__link">
        <a href="https://sroelants.github.io/sorted/"
        target="_blank" rel="noopener noreferrer">See it in action.</a>
      </div>
      <div class="project__link">
        <a href="https://github.com/sroelants/tictactoe"
        target="_blank" rel="noopener noreferrer">See the source code.</a>
      </div>
    </div>
  </div>
</section>

<section class="project">
  <h2 class="project__title">What is this?</h2>
  <div class="project__description">
    <p>
      An educational game I made when I was diving deeper into the intricacies
      of javascript's <code>this</code> keyword. I made up a whole bunch of
      code examples illustrating different scenarios.
    </p>
    <ul class="project__list">
      <li><strong>Things I used:</strong> React, ES6</li>
      <li><strong>Things I learned:</strong> How <code>this</code> truly works,
      finally.</li>
    </ul>
    <div class="project__links">
      <div class="project__link">
        <a href="/projects/whatisthis"
        target="_blank" rel="noopener noreferrer">See it in action.</a>
      </div>
      <div class="project__link">
        <a href="https://github.com/sroelants/whatisthis-react"
        target="_blank" rel="noopener noreferrer">See the source code.</a>
      </div>
    </div>
  </div>
</section>

<section class="project">
  <h2 class="project__title">clojure-fancify-symbols.vim</h2>
  <div class="project__description">
    <p>
      Spacemacs' Clojure layer comes with a configuration flag <code>
      clojure-enable-fancify-symbols</code> that did a couple of simple 
      (non-destructive) unicode transformations. I wrote a vim plugin to mimic
      the same behavior. (Sorry spacemacs, it just wasn't meant to be...)
    </p>
    <ul class="project__list">
      <li><strong>Things I used:</strong> vimscript</li>
      <li><strong>Things I learned:</strong> How modern vim plugins are structured,
      how awful vimscript is as a language.</li>
    </ul>
    <div class="project__links">
      <div class="project__link">
        <a href="https://github.com/sroelants/clojure-fancify-symbols.vim"
        target="_blank" rel="noopener noreferrer">See the source code.</a>
      </div>
    </div>
  </div>
</section>

<section class="project">
  <h2 class="project__title">Tic tac toe in Purescript</h2>
  <div class="project__description">
    <p>
      Wrote a simple tic tac toe game in Purescript, using Pux as a React 
      wrapper. This essentially turns React into an Elm-like MVC architecture, 
      but with an (arguably) better language. I also enjoyed diving into simple
      game AI to wire up the computer player.
    </p>
    <ul class="project__list">
      <li><strong>Things I used:</strong> Purescript, Pux (React)</li>
      <li><strong>Things I learned:</strong> Purescript tooling is not quite 
      there yet, but the language lets you write for the frontend in a language
      that comes close to Haskell's expressivity. Learned about game trees,
      minimax algorithms and alpha-beta pruning.</li>
    </ul>
    <div class="project__links">
      <div class="project__link">
        <a href="/projects/tictactoe"
        target="_blank" rel="noopener noreferrer">See it in action.</a>
      </div>
      <div class="project__link">
        <a href="https://github.com/sroelants/tictactoe"
        target="_blank" rel="noopener noreferrer">See the source code.</a>
      </div>
    </div>
  </div>
</section>
