{"version":3,"sources":["components/Landing.tsx","components/Figure.tsx","components/Bar.tsx","components/Caption.tsx","components/Plot.tsx","components/AlgorithmBar.tsx","utils/util.ts","algorithms/bubblesort.ts","algorithms/mergesort.ts","algorithms/heapsort.ts","algorithms/quicksort.ts","components/App.tsx","index.tsx"],"names":["Logo","className","LandingText","Landing","Figure","bars","Bar","height","width","active","testing","style","minHeight","margin","Caption","clickHandler","startSort","pauseSort","restartSort","numOfBars","currentlySorting","finished","label","sortButton","onClick","display","Plot","props","heights","map","h","i","key","includes","length","AlgorithmBar","algorithm","setAlgorithm","setNumOfBars","setSpeed","undefined","type","min","max","step","defaultValue","onChange","ev","target","valueAsNumber","isSorted","array","swap","j","temp","range","start","end","Array","from","v","k","randArray","fill","x","Math","floor","random","bubbleSortGenerator","mergeSortGenerator","N","n","arr1","slice","arr2","merged","push","shift","semiMerged","concat","splice","heapSortGenerator","bubbleDownGenerator","index","rChildIndex","lChildIndex","largestChildIndex","quickSortGenerator","pivot","less","greater","sortGens","bubblesort","mergesort","heapsort","quicksort","App","state","speed","sortGen","bind","sort","this","setState","diff","newHeights","next","value","done","setTimeout","ABProps","plotProps","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.82721906.chunk.js","sourcesContent":["import React from 'react';\nimport './Landing.sass';\n\nconst Landing: React.FunctionComponent = () => {\n  return (\n    <div className=\"landing-wrapper\">\n      <div className=\"landing\">\n        <Logo />\n        <LandingText/>\n      </div>\n  </div>\n         );\n}\n\nconst Logo: React.FunctionComponent = () => (\n  <div className=\"landing__logo\">\n    <div className=\"landing__logo__bar landing__logo__bar1\"></div>\n    <div className=\"landing__logo__bar landing__logo__bar2\"></div>\n    <div className=\"landing__logo__bar landing__logo__bar3\"></div>\n  </div>)\n\nconst LandingText: React.FunctionComponent = () => (\n    <div className=\"landing__landingtext\">\n      <div className=\"landing__landingtext__welcome\">Welcome to</div>\n      <div className=\"landing__landingtext__sorted\">Sorted!</div>\n      <p className=\"landing__landingtext__body\">{\"Sorted is an interactive tool for visualizing popular sorting algorithms. Simply select an algorithm, the size of the set you want to sort, and the animation speed.\"}</p>\n    </div>\n  )\n\nexport default Landing;\n","import React from 'react';\nimport './Figure.sass';\n\n\nconst Figure: React.FunctionComponent<FigureProps> = ({bars}) => {\n  return (\n    <div className=\"figure\">{ bars }</div>\n  )\n}\n\n\n// Using React.FC[] here doesn't work!\n\nexport interface FigureProps {\n  bars: JSX.Element[]\n}\nexport { Figure }\n","import React from 'react';\nimport './Bar.sass';\n\nconst Bar: React.FC<BarProps> = ({ height, width, active, testing }) => {\n  return <div style={{minHeight: 4*height + \"px\", width: 100*width + \"%\",\n    margin: \"0 \" + 50 * width+ \"px\"} } \n              className={\"figure__bar\" + (active? \" active\": \"\") + (testing? \" testing\": \"\")  }></div>\n}\n\nexport interface BarProps {\n  height: number\n  width: number\n  active: boolean\n  testing: boolean\n}\n\nexport { Bar };\n","import React from \"react\";\nimport \"./Plot.sass\";\n\nexport interface CaptionProps {\n  startSort: () => void;\n  pauseSort: () => void;\n  restartSort: () => void;\n  numOfBars: number;\n  currentlySorting: boolean;\n  finished: boolean;\n}\n\nconst Caption: React.FC<CaptionProps> = ({\n  startSort,\n  pauseSort,\n  restartSort,\n  numOfBars,\n  currentlySorting,\n  finished\n}: CaptionProps) => {\n  let label = finished ? \"Restart\" : currentlySorting ? \"Pause\" : \"Sort\";\n\n  let clickHandler;\n  if (finished) clickHandler = restartSort;\n  else if (currentlySorting) clickHandler = pauseSort;\n  else clickHandler = startSort;\n\n  let sortButton: JSX.Element = (\n    <button className=\"caption__sortbutton\" onClick={clickHandler}>\n      {label}\n    </button>\n  );\n\n  return (\n    <div className=\"caption\">\n      <div style={{ display: \"flex\" }}>\n        <div className=\"caption__elements\">\n          {\"Number of elements: \" + numOfBars}\n        </div>\n      </div>\n      {sortButton}\n    </div>\n  );\n};\n\nexport { Caption };\n","import React from \"react\";\nimport { Figure } from \"./Figure\";\nimport { Bar } from \"./Bar\";\nimport { Caption, CaptionProps } from \"./Caption\";\nimport \"./Plot.sass\";\n\nexport interface PlotProps {\n  heights: number[];\n  numOfBars: number;\n  active: number[];\n  testing: number[];\n  currentlySorting: boolean;\n  finished: boolean;\n  startSort: () => void;\n  pauseSort: () => void;\n  restartSort: () => void;\n}\n\nconst Plot: React.FC<PlotProps> = (props: PlotProps) => {\n  const bars: JSX.Element[] = props.heights.map((h, i) => {\n    return (\n      <Bar\n        key={i}\n        active={props.active.includes(i)}\n        testing={props.testing.includes(i)}\n        height={h}\n        width={1 / props.heights.length}\n      />\n    );\n  });\n\n  return (\n    <div className=\"plot\">\n      <Figure bars={bars} />\n      <Caption\n        numOfBars={props.numOfBars}\n        currentlySorting={props.currentlySorting}\n        startSort={props.startSort}\n        pauseSort={props.pauseSort}\n        restartSort={props.restartSort}\n        finished={props.finished}\n      />\n    </div>\n  );\n};\n\nexport { Plot };\n","import React from \"react\";\nimport \"./AlgorithmBar.sass\";\n\nexport interface AlgorithmBarProps {\n  algorithm: string;\n  setSpeed: (speed: number) => void;\n  setNumOfBars: (num: number) => void;\n  setAlgorithm: (alg: string) => void;\n}\n\nconst AlgorithmBar: React.FunctionComponent<AlgorithmBarProps> = ({\n  algorithm,\n  setAlgorithm,\n  setNumOfBars,\n  setSpeed\n}: AlgorithmBarProps) => {\n  return (\n    <div className=\"algorithmbar\">\n      <div className=\"algorithmbar__algorithms\">\n        <div className=\"algorithmbar__label\">Algorithms:</div>\n\n        <button\n          className={\n            algorithm === \"mergesort\"\n              ? \"algorithmbar__algorithm algorithmbar__algorithm--active\"\n              : \"algorithmbar__algorithm\"\n          }\n          onClick={() =>\n            algorithm !== \"mergesort\" ? setAlgorithm(\"mergesort\") : undefined\n          }\n        >\n          Merge sort\n        </button>\n\n        <button\n          className={\n            algorithm === \"heapsort\"\n              ? \"algorithmbar__algorithm algorithmbar__algorithm--active\"\n              : \"algorithmbar__algorithm\"\n          }\n          onClick={() =>\n            algorithm !== \"heapsort\" ? setAlgorithm(\"heapsort\") : undefined\n          }\n        >\n          Heap sort\n        </button>\n\n        <button\n          className={\n            algorithm === \"bubblesort\"\n              ? \"algorithmbar__algorithm algorithmbar__algorithm--active\"\n              : \"algorithmbar__algorithm\"\n          }\n          onClick={() =>\n            algorithm !== \"bubblesort\" ? setAlgorithm(\"bubblesort\") : undefined\n          }\n        >\n          Bubble sort\n        </button>\n\n        <button\n          className={\n            algorithm === \"quicksort\"\n              ? \"algorithmbar__algorithm algorithmbar__algorithm--active\"\n              : \"algorithmbar__algorithm\"\n          }\n          onClick={() =>\n            algorithm !== \"quicksort\" ? setAlgorithm(\"quicksort\") : undefined\n          }\n        >\n          Quick sort\n        </button>\n      </div>\n      <div className=\"algorithmbar__size\">\n        <div className=\"algorithmbar__label\">Size:</div>\n        <input\n          type=\"range\"\n          min=\"10\"\n          max=\"100\"\n          step=\"1\"\n          defaultValue=\"50\"\n          className=\"algorithmbar__input\"\n          onChange={ev => setNumOfBars(ev.target.valueAsNumber)}\n        />\n      </div>\n      <div className=\"algorithmbar__speed\">\n        <div className=\"algorithmbar__label\">Speed:</div>\n        <input\n          type=\"range\"\n          min=\"0.01\"\n          max=\"5\"\n          step=\"0.1\"\n          defaultValue=\"2\"\n          className=\"algorithmbar__input\"\n          onChange={ev => setSpeed(ev.target.valueAsNumber)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { AlgorithmBar };\n","function isSorted(array: number[]): boolean {\n  let sorted = true;\n  for (let i = 1; i < array.length; i++) {\n    if (array[i - 1] > array[i]) return false;\n  }\n  return sorted;\n}\n\nfunction swap<T>(array: Array<T>, i: number, j: number): Array<T> {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n  return array;\n}\n\nfunction range(start: number, end: number) {\n  return Array.from({ length: end - start }, (v, k) => k + start);\n}\n\nfunction randArray(length: number, min: number = 0, max: number = 100) {\n  return Array(length)\n    .fill(0)\n    .map(x => min + Math.floor((max - min) * Math.random()));\n}\n\nfunction isMaxHeap(array: number[]): boolean {\n  let isHeap = true;\n  for (let i = 0; i < array.length; i++) {\n    if (2 * i + 1 < array.length)\n      isHeap = isHeap && array[i] >= array[2 * i + 1];\n    if (2 * i + 2 < array.length)\n      isHeap = isHeap && array[i] >= array[2 * i + 2];\n  }\n  return isHeap;\n}\n\nfunction partition(array: number[], value: number): [number[], number[]] {\n  let less = [];\n  let greater = [];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < value) less.push(array[i]);\n    else greater.push(array[i]);\n  }\n  return [less, greater];\n}\n\nexport { isSorted, swap, range, randArray, isMaxHeap, partition };\n","import { isSorted, swap } from \"../utils/util\";\n\nfunction* bubbleSortGenerator(array: number[]): Generator {\n  for (let j = array.length; j > 0; j--) {\n    for (let i = 0; i < j - 1; i++) {\n      yield { array: array, active: [i, i + 1] };\n      if (array[i] > array[i + 1]) {\n        array = swap(array, i, i + 1);\n        yield { array: array, active: [i, i + 1] };\n      }\n    }\n  }\n  return { array: array, active: [] };\n}\n\nfunction bubbleSort(array: number[]): number[] {\n  while (!isSorted(array)) {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] < array[i + 1]) {\n        array = swap(array, i, i + 1);\n      }\n    }\n  }\n  return array;\n}\n\nexport { bubbleSort, bubbleSortGenerator };\n","import { isSorted, range } from \"../utils/util\";\n\n// In order to easily implement the sort as an algorithm, we implement a bottom-\n// up merge sort (non-recursive):\n// First merge elements pairwise, then merge the paired lists pairwise, then\n// the 4-element lists pairwise, etc...\n\nfunction* mergeSortGenerator(array: number[]): Generator {\n  let N = array.length;\n  if (isSorted(array)) return { array: array, active: [] };\n\n  // When sweeping the array, aim for 2*N elements, so we're sure to include any\n  // remaining elements.\n  for (let n = 2; n < 2 * N; n *= 2) {\n    // n = merge window size (fits two subarrays we're going to merge)\n    for (let i = 0; i * n < N; i++) {\n      // For every window's width in array, ie for every two subarrays\n      let arr1 = array.slice(i * n, i * n + n / 2); // length n/2\n      let arr2 = array.slice(i * n + n / 2, (i + 1) * n);\n\n      // Merge the two subarrays\n      let merged: any = [];\n      while (arr1.length && arr2.length) {\n        // While both non-empty\n        if (arr1[0] < arr2[0]) {\n          merged.push(arr1.shift());\n        } else {\n          merged.push(arr2.shift());\n        }\n        // Splice in the intermediate result for visualisation.\n        let semiMerged = merged.concat(arr1).concat(arr2);\n        array.splice(i * n, semiMerged.length, ...semiMerged);\n        yield { array: array, active: range(i * n, (i + 1) * n) };\n      }\n      // Add remaining elements.\n      if (arr1.length) merged = merged.concat(arr1);\n      else merged = merged.concat(arr2);\n\n      // insert at position i*n, replace n elements\n      array.splice(i * n, merged.length, ...merged);\n      yield { array: array, active: [] };\n    }\n  }\n  return { array: array, active: [] };\n}\n\nfunction mergeSort(array: number[]): number[] {\n  let N = array.length;\n  if (N <= 1) return array; // Base case\n\n  let arr1 = array.slice(0, Math.floor(N / 2));\n  let arr2 = array.slice(Math.floor(N / 2), N);\n\n  return merge(mergeSort(arr1), mergeSort(arr2));\n\n  function merge(arr1: number[], arr2: number[]): number[] {\n    // Merge two sorted arrays.\n\n    // If one of both arrays is empty, simply return the remaining array.\n    if (arr1.length === 0) return arr2;\n    if (arr2.length === 0) return arr1;\n\n    let [head1, ...tails1] = arr1;\n    let [head2, ...tails2] = arr2;\n    if (head1 < head2) return [head1].concat(merge(tails1, arr2));\n    else return [head2].concat(merge(arr1, tails2));\n  }\n}\n\nexport { mergeSort, mergeSortGenerator };\n","import { swap } from \"../utils/util\";\n\n// Heapsort:\n// 1. Arrange the array into a max heap. (Heapify)\n// 2. Peel off the max value, put it in last place\n// 3. Heapify the remaining array.\n// 4. Repeat.\n//\n\n/**\n * Turn an almost-max heap `array` into a max heap by bubbling down the element\n * at `index`.\n *\n * Note: If the input array is not an \"almost-heap\", ie, up to a displaced\n * root node, the result will probably not be an actual max-heap. bubbleDown\n * simply restores the heap property of a modified heap.\n *\n * @param {number[]} array - The array to heapify.\n * @param {number} index - The position of the out-of-place element to bubble\n * down\n *\n * @return {array[]} - The heapified array.\n **/\nfunction bubbleDown(\n  array: number[],\n  index: number,\n  max: number = array.length\n): number[] {\n  const lChildIndex = index * 2 + 1;\n  const rChildIndex = index * 2 + 2;\n\n  // If there are no children, do nothing.\n  if (lChildIndex >= max) return array;\n\n  const largestChildIndex =\n    rChildIndex >= max\n      ? lChildIndex //If no right child, left is largest by default, else:\n      : array[lChildIndex] > array[rChildIndex]\n      ? lChildIndex\n      : rChildIndex;\n\n  // If element at index is larger than both children, we are done bubbling.\n  if (array[index] >= array[largestChildIndex]) return array;\n\n  // Swap elements and recursively bubble down\n  return bubbleDown(\n    swap(array, index, largestChildIndex),\n    largestChildIndex,\n    max\n  );\n}\n\n/**\n * Rearrange array to max heap form. In a max heap, every node (at index i)\n * is larger than its child nodes (at index 2*i and 2*i + 1).\n *\n * @param {number[]} array - The array to turn into a heap.\n * @return {number[]} - The heapified array.\n **/\nfunction heapify(array: number[]): number[] {\n  // Starting from the bottom, bubble down every node.\n  for (let i = array.length - 1; i >= 0; i--) {\n    array = bubbleDown(array, i);\n  }\n\n  return array;\n}\n\n/**\n * Sort an array using heap sort.\n *\n * @param {number[]} array - The array that needs to be sorted.\n * @return {number[]} - The sorted array.\n **/\nfunction heapsort(array: number[]): number[] {\n  array = heapify(array);\n  for (let i = array.length - 1; i > 0; i--) {\n    array = swap(array, 0, i);\n    array = bubbleDown(array, 0, i);\n  }\n  return array;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// Heap sort generator\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Generator that yields individual heap sort steps.\n *\n * @param {number[]} array - The array that needs to be sorted.\n * @return {Generator<number[]>} - The sorted array.\n **/\nfunction* heapSortGenerator(array: number[]) {\n  if (!array.length) {\n    return { array: array };\n  }\n  // Create max heap\n  for (let i = Math.floor(array.length / 2); i >= 0; i--) {\n    array = (yield* bubbleDownGenerator(array, i)).array;\n    yield { array: array, active: [i] };\n  }\n\n  for (let i = array.length - 1; i > 0; i--) {\n    // Place root node in sorted position\n    array = swap(array, 0, i);\n    yield { array: array };\n    // Bubble down the new root\n    array = (yield* bubbleDownGenerator(array, 0, i)).array;\n  }\n  return { array: array };\n}\n\nfunction* bubbleDownGenerator(\n  array: number[],\n  index: number,\n  max: number = array.length\n): any {\n  while (index < max) {\n    const lChildIndex = index * 2 + 1;\n    const rChildIndex = index * 2 + 2;\n\n    // If there are no children, do nothing.\n    if (lChildIndex >= max) {\n      return { array: array, active: [index] };\n    }\n\n    const largestChildIndex =\n      rChildIndex >= max\n        ? lChildIndex //If no right child, left is largest by default, else:\n        : array[lChildIndex] > array[rChildIndex]\n        ? lChildIndex\n        : rChildIndex;\n\n    if (array[index] >= array[largestChildIndex]) {\n      return { array: array, active: [index, largestChildIndex] };\n    }\n    array = swap(array, index, largestChildIndex);\n    yield { array: array, active: [index, largestChildIndex] };\n    index = largestChildIndex;\n  }\n}\n\nexport { heapify, bubbleDown, heapsort, heapSortGenerator };\n","// Quicksort\n//\n// Algorithm:\n// 1. Pick a pivot\n// 2. Do a pass over the array, all elements less than pivot to the left, others\n//    to the right.\n// 3. Repeat with both sublists.\n\nconst range = (start: number, end: number) =>\n  Array.from({ length: end - start }, (v, k) => k + start);\n\nfunction* quickSortGenerator(\n  array: number[],\n  min: number = 0,\n  max: number = array.length\n): any {\n  if (max - min <= 1) return { array: array, active: [min] };\n  // Partition array¬\n  let pivot = array[min];\n  let less: number[] = [];\n  let greater: number[] = [];\n\n  for (let i = min + 1; i < max; i++) {\n    if (array[i] < pivot) less.push(array[i]);\n    else greater.push(array[i]);\n    array.splice(min, i - min + 1, ...less.concat(pivot, greater));\n    yield {\n      array: array,\n      active: [min + less.length],\n      testing: range(min, max)\n    };\n  }\n\n  yield* quickSortGenerator(array, min, min + less.length);\n  yield* quickSortGenerator(array, min + less.length + 1, max);\n  return { array: array };\n}\nexport { quickSortGenerator };\n","import React from \"react\";\nimport \"./App.sass\";\nimport Landing from \"./Landing\";\nimport { Plot, PlotProps } from \"./Plot\";\nimport { AlgorithmBar, AlgorithmBarProps } from \"./AlgorithmBar\";\nimport { bubbleSortGenerator } from \"../algorithms/bubblesort\";\nimport { mergeSortGenerator } from \"../algorithms/mergesort\";\nimport { heapSortGenerator } from \"../algorithms/heapsort\";\nimport { quickSortGenerator } from \"../algorithms/quicksort\";\nimport { heapify, bubbleDown } from \"../algorithms/heapsort\";\nimport { randArray } from \"../utils/util\";\n\nconst sortGens: any = {\n  bubblesort: bubbleSortGenerator,\n  mergesort: mergeSortGenerator,\n  heapsort: heapSortGenerator,\n  quicksort: quickSortGenerator\n};\n\ninterface AppProps {}\n\ninterface AppState {\n  numOfBars: number;\n  algorithm: string;\n  speed: number;\n  active: number[];\n  testing: number[];\n  heights: number[];\n  currentlySorting: boolean;\n  finished: boolean;\n  sortGen: Generator;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    let heights = randArray(50);\n    this.state = {\n      finished: false,\n      numOfBars: 50,\n      algorithm: \"\",\n      speed: 2,\n      active: [],\n      testing: [],\n      heights: heights,\n      currentlySorting: false,\n      sortGen: bubbleSortGenerator([])\n    };\n    this.setSpeed = this.setSpeed.bind(this);\n    this.setNumOfBars = this.setNumOfBars.bind(this);\n    this.setAlgorithm = this.setAlgorithm.bind(this);\n    this.startSort = this.startSort.bind(this);\n    this.pauseSort = this.pauseSort.bind(this);\n    this.restartSort = this.restartSort.bind(this);\n    this.sort = this.sort.bind(this);\n  }\n\n  setSpeed(speed: number) {\n    this.setState({ speed: speed });\n  }\n\n  setNumOfBars(numOfBars: number) {\n    const diff = numOfBars - this.state.numOfBars;\n    const newHeights =\n      diff > 0\n        ? this.state.heights.concat(randArray(diff))\n        : this.state.heights.slice(0, numOfBars);\n    this.setState(state => {\n      let algorithm: string = state.algorithm ? state.algorithm : \"bubblesort\";\n      return {\n        heights: newHeights,\n        numOfBars: numOfBars,\n        sortGen: sortGens[algorithm](newHeights)\n      };\n    });\n  }\n\n  setAlgorithm(algorithm: string) {\n    this.setState({\n      algorithm: algorithm,\n      sortGen: sortGens[algorithm](this.state.heights)\n    });\n  }\n\n  startSort() {\n    this.setState({ currentlySorting: true }, this.sort);\n  }\n\n  pauseSort() {\n    this.setState({ currentlySorting: false });\n  }\n\n  restartSort() {\n    let heights = randArray(this.state.numOfBars);\n    let sortGen = sortGens[this.state.algorithm](heights);\n    this.setState({\n      heights: heights,\n      sortGen: sortGen,\n      currentlySorting: false,\n      finished: false\n    });\n  }\n\n  sort() {\n    let { value, done } = this.state.sortGen.next();\n    let heights: number[] = value.array;\n    let active: number[] = value.active ? value.active : [];\n    let testing: number[] = value.testing ? value.testing : [];\n    this.setState({\n      heights: heights,\n      active: active,\n      testing: testing\n    });\n    if (done) this.setState({ finished: true, currentlySorting: false });\n    else if (this.state.currentlySorting)\n      setTimeout(this.sort, 100 / this.state.speed);\n  }\n\n  render() {\n    let ABProps: AlgorithmBarProps = {\n      algorithm: this.state.algorithm,\n      setSpeed: this.setSpeed,\n      setAlgorithm: this.setAlgorithm,\n      setNumOfBars: this.setNumOfBars\n    };\n\n    let plotProps: PlotProps = {\n      numOfBars: this.state.numOfBars,\n      heights: this.state.heights,\n      active: this.state.active,\n      testing: this.state.testing,\n      currentlySorting: this.state.currentlySorting,\n      finished: this.state.finished,\n      startSort: this.startSort,\n      pauseSort: this.pauseSort,\n      restartSort: this.restartSort\n    };\n\n    return (\n      <div className=\"main\">\n        <AlgorithmBar {...ABProps} />\n        <div className=\"content-wrapper\">\n          {this.state.algorithm === \"\" ? <Landing /> : <Plot {...plotProps} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css'\nimport './index.sass';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}