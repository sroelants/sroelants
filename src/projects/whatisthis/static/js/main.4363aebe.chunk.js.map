{"version":3,"sources":["CodeField.js","Button.js","ButtonPanel.js","ModalButton.js","Modal.js","questions.js","content.js","App.js","index.js"],"names":["CodeField","props","content","Prism","highlightAll","className","this","React","PureComponent","Button","onClick","answerHandler","label","ButtonPanel","buttons","options","map","l","i","key","ModalButton","type","clickHandler","variant","button","Modal","closeModal","closeHandler","explanationHandler","nextHandler","bind","context","role","aria-label","Component","questions","codesnippet","correct","explanation","aboutContent","href","target","rel","correctContent","incorrectContent","getQuestion","Math","floor","random","length","App","question","state","view","openAbout","checkAnswer","showExplanation","nextQuestion","getModal","setState","str","forceUpdate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4363aebe.chunk.js","sourcesContent":["import React from 'react';\nimport Prism from 'prismjs';\nimport './prism-monokai.css';\nimport './CodeField.sass';\n\nclass CodeField extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.content = props.content;\n  }\n\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n\n  render() {\n    return (\n      <div className=\"codesnippet\">\n        <pre className=\"lang-js\">\n          <code className=\"lang-js codesnippet__content\">{this.content}</code>\n        </pre>\n      </div>\n    );\n  }\n}\n\nexport default CodeField;\n","import React from \"react\";\nimport \"./Button.sass\";\n\nconst Button = props => {\n  return (\n    <button className=\"button options__button\" onClick={props.answerHandler}>\n      {\" \"}\n      {props.label}{\" \"}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"./Button\";\nimport \"./ButtonPanel.sass\";\n\nconst ButtonPanel = props => {\n  const buttons = props.options.map((l, i) => (\n    <Button label={l} key={i} answerHandler={props.answerHandler(l)} />\n  ));\n  return <div className=\"button-panel\">{buttons}</div>;\n};\n\nexport default ButtonPanel;\n","import React from \"react\";\nimport HelpOutline from \"@material-ui/icons/HelpOutline\";\nimport Autorenew from \"@material-ui/icons/Autorenew\";\nimport \"./ModalButton.sass\";\n\nconst ModalButton = ({ type, clickHandler }) => {\n  function button(type) {\n    switch (type) {\n      case \"explanation\":\n        return (\n          <button className=\"button modal__button\" onClick={clickHandler}>\n            <HelpOutline\n              className=\"modal__button__helper-icon\"\n              variant=\"Explanation\"\n            />\n            <span className=\"modal__button__text\">I don't get it.</span>\n          </button>\n        );\n      case \"next\":\n        return (\n          <button className=\"button modal__button\" onClick={clickHandler}>\n            <Autorenew className=\"modal__button__helper-icon\" variant=\"Next\" />\n            <span className=\"modal__button__text\">Give me another one!</span>\n          </button>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return button(type);\n};\n\nexport default ModalButton;\n","import React from 'react';\nimport Prism from 'prismjs';\nimport ModalButton from './ModalButton';\nimport './Modal.sass';\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.type = props.type;\n    this.content = props.content;\n    this.closeModal = props.closeHandler;\n    this.explanationHandler = props.explanationHandler;\n    this.nextHandler = props.nextHandler;\n    this.buttons = this.buttons.bind(this);\n  }\n\n  buttons(context) {\n    switch (context) {\n      case 'answer':\n        return (\n          <div className=\"modal__options\">\n            <ModalButton\n              type=\"explanation\"\n              clickHandler={this.explanationHandler}\n            />\n            <ModalButton type=\"next\" clickHandler={this.nextHandler} />\n          </div>\n        );\n      case 'explanation':\n        return (\n          <div className=\"modal__options\">\n            <ModalButton type=\"next\" clickHandler={this.nextHandler} />\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"mask\" />\n        <div className=\"modal\">\n          <button className=\"modal__close\" onClick={this.closeModal}>\n            <span role=\"img\" aria-label=\"close\">\n              &#10060;\n            </span>\n          </button>\n          {this.content}\n          {this.buttons(this.type)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Modal;\n","import React from 'react';\n\nconst questions = [\n  {\n    codesnippet: `\n'use strict';\n\nfunction fun(a, b) {\n  return a + b;\n}\nconsole.log(this);\n    `,\n    options: ['window', 'undefined', 'fun', 'console'],\n    correct: 'window',\n    explanation: (\n      <div>\n        <h1> Explanation </h1>\n        <p>\n          In a global context (ie. when not referenced within the body of a\n          function declaration),\n          {' '}\n          <code>this</code>\n          {' '}\nalways refers to the global\n          object, in this case\n          {' '}\n          <code>window</code>\n          {' '}\n. This remains true whether\n          javascript is running in strict mode or not.\n        </p>\n      </div>\n    ),\n  },\n  {\n    codesnippet: `\nvar obj = {\n  data: 5\n};\n\nfunction myFun() {\n  return this\n}\n\nobj.fun = myFun;\nconsole.log(obj.fun());\n    `,\n    options: ['window', 'undefined', 'myFun', 'obj'],\n    correct: 'obj',\n    explanation: (\n      <div>\n        <h1> Explanation </h1>\n        <p>\n          <code>this</code>\n          {' '}\nrefers to the\n          <em>execution</em>\n          {' '}\ncontext. It\n          completely disregards the lexical context of where the keyword is used\n          within the program code. In this instance, the function body is run as\n          a method on the object\n          <code>obj</code>\n          {' '}\n, so the execution context sets\n          <code>this</code>\n          {' '}\nto\n          <code>obj</code>\n          {' '}\n        </p>\n      </div>\n    ),\n  },\n  {\n    codesnippet: `\nvar obj = {\n  data: 5\n  myMethod: function(a, b) {\n    console.log(this);\n    return a + b;\n  }\n};\nvar myFun = obj.myMethod;\nmyFun(1,2);\n    `,\n    options: ['window', 'undefined', 'myFun', 'obj'],\n    correct: 'window',\n    explanation: (\n      <div>\n        <h1> Explanation </h1>\n        <p>\n          <code>this</code>\n          {' '}\nrefers to the\n          <em>execution</em>\n          {' '}\ncontext of a function. Even though\n          <code>myFun</code>\n          {' '}\nis a reference to the\n          <code>myMethod</code>\n          {' '}\nmethod on\n          <code>obj</code>\n          , it is\n          {' '}\n          <em>executed</em>\n          {' '}\nas a top-level function. Hence, the\n          execution context is set to\n          {' '}\n          <code>window</code>\n          {' '}\n(How would this change\n          if we set\n          {' '}\n          <code>'use strict;'</code>\n          ?)\n        </p>\n      </div>\n    ),\n  },\n  {\n    codesnippet: `\nvar luke = {\n  name: \"Luke\",\n  greet: function() {\n    console.log(\"My name is\" + this.name);\n  }\n};\nvar mike = Object.create(luke);\nmike.name = \"Mike\";\nmike.greet();\n    `,\n    options: ['window', 'undefined', 'mike', 'luke'],\n    correct: 'mike',\n    explanation: (\n      <div>\n        <h1> Explanation </h1>\n        <p>\n          Even though\n          {' '}\n          <code>mike</code>\n          {' '}\ndoesn't have a\n          {' '}\n          <code>greet()</code>\n          {' '}\n          method set, it inherits it from the\n          {' '}\n          <code>luke</code>\n          {' '}\nprototype. Since\n          {' '}\n          <code>this</code>\n          {' '}\nrefers to the execution context, not the lexical\n          context (where it is defined), it refers to\n          <code>mike</code>\n          , not\n          {' '}\n          <code>luke</code>\n          .\n        </p>\n      </div>\n    ),\n  },\n  {\n    codesnippet: `\n'use strict';\nfunction highFives(name) {\n  console.log(this + \"high fives \" + name + \"!\");\n}\n\nhighFives.call(\"Mike\", \"Putin\");\n    `,\n    options: ['Mike', 'undefined', 'Putin', 'window'],\n    correct: 'Mike',\n    explanation: (\n      <div>\n        <h1> Explanation </h1>\n        <p>\n          The\n          {' '}\n          <code>.call()</code>\n          {' '}\nmethod, defined for function objects, allows\n          one to explicitely pass a value for\n          {' '}\n          <code>this</code>\n          {' '}\nas its first\n          argument. Note that\n          {' '}\n          <code>this</code>\n          {' '}\nneed not refer to a javascript\n          object, but can be any datatype, even a string or an integer.\n          {' '}\n          <em>Fun fact:</em>\n          {' '}\nAll function calls, behind the screens, are\n          transformed by javascript to an invocation of the\n          <code>call()</code>\n          {' '}\nmethod. Running a top-level function\n          {' '}\n          <code>fun()</code>\n          {' '}\nis translated by javascript to\n          {' '}\n          <code>fun.call(window)</code>\n          {' '}\n(or\n          <code>fun.call(undefined)</code>\n          {' '}\n, if we are in strict mode.\n        </p>\n      </div>\n    ),\n  },\n  {\n    codesnippet: `\nlet mascot = {\n  name: \"Tony the Tiger\",\n  printMood: function(mood) {\n    console.log(this.name + \" is feeling \" + mood);\n  }\n}\n\nlet printEmotionalState = function(state){ \n  return mascot.printMood.call(mascot, state);\n}\n\nprintEmotionalState(\"meh.\")\n    `,\n    options: ['mascot', 'undefined', 'Tony the Tiger', 'window'],\n    correct: 'mascot',\n    explanation: (\n      <div>\n        <h1> Explanation </h1>\n        <p>\n          This one is tricky.\n          {' '}\n          <code>printEmotionalState</code>\n          {' '}\nis a top-level\n          function that is called in a global context, so we would expect\n          {' '}\n          <code>this</code>\n          {' '}\nto refer to the\n          <code>window</code>\n          {' '}\nobject. However,\n          <code>printEmotionalState</code>\n          {' '}\ninvokes\n          <code>mascot.printMood</code>\n          {' '}\n          <em>\n            {' '}\n            using the\n            {' '}\n            <code>call</code>\n            {' '}\nmethod\n            {' '}\n          </em>\n          {' '}\n          and binding\n          {' '}\n          <code>this</code>\n          {' '}\nback to\n          {' '}\n          <code>mascot</code>\n          {' '}\nexplicitely!\n        </p>\n      </div>\n    ),\n  },\n  {\n    codesnippet: `\n'use strict';\nfunction Simpson(name) {\n  this.name = \"Lisa\";\n}\n\nfunction Flanders(name) {\n  this.name = name;\n  return {name: \"Todd\"};\n}\nlet bart = new Simpson(\"Bart\");\nlet rod = new Flanders(\"Rod\");\nconsole.log(bart.name + \" and \" + rod.name); // What is printed?\n`,\n    options: ['Bart and Rod', 'Lisa and Todd', 'Lisa and Rod', 'Bart and Todd'],\n    correct: 'Lisa and Todd',\n    explanation: (\n      <div>\n        <h1> Explanation </h1>\n        <p>\n          This is a trick question that has more to do with constructors than it\n          does with\n          {' '}\n          <code>this</code>\n          . In a typical constructor call (that is, a function that is called\n          with the\n          {' '}\n          <code>new</code>\n          {' '}\nkeyword and returns an object), the the\n          {' '}\n          <code>this</code>\n          {' '}\nkeyword refers to the newly created object, and is\n          returned by the constructor call.\n          <em>But</em>\n          , if we wanted to, we can make the constructor return\n          {' '}\n          <em>\n            any\n          </em>\n          {' '}\n          object we wish by explicitely adding a\n          {' '}\n          <code>return</code>\n          {' '}\nstatement\n          returning an object. In this case, the\n          {' '}\n          <code>Flanders</code>\n          {' '}\n          constructor creates a new Flanders instance with\n          {' '}\n          <code>name</code>\n          {' '}\nset\n          to \"Rod\", but\n          {' '}\n          <em>instead</em>\n          {' '}\nreturns a different object, with\n          <code>name</code>\n          {' '}\nset to \"Todd\". The creation of the first object is\n          essentially for nothing.\n        </p>\n      </div>\n    ),\n  },\n];\n\nexport default questions;\n","import React from 'react';\n\nconst aboutContent = (\n  <div>\n    <h1>An educational game for beginning JS developers</h1>\n    <p>\n      For a long time, javascript was considered a confusing, poorly designed\n      programming language that has far outgrown its domain of use. With the\n      newer ECMA specifications (ES6 and above), many of these gripes are\n      becoming a thing of the past.\n    </p>\n    <p>\n      One thing that has not changed, however, is javascript's implementation of\n      the\n      {' '}\n      <code>this</code>\n      {' '}\nkeyword that seemingly differs from how most other\n      languages have implemented it. To say that\n      {' '}\n      <code>this</code>\n      <a\n        href=\"https://codeburst.io/all-about-this-and-new-keywords-in-javascript-38039f71780c\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {' '}\n        is a\n        {' '}\n      </a>\n      <a\n        href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {' '}\n        stumbling block\n        {' '}\n      </a>\n      <a\n        href=\"https://stackoverflow.com/questions/3127429/how-does-the-this-keyword-work\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {' '}\n        for many\n        {' '}\n      </a>\n      <a\n        href=\"https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {' '}\n        javascript beginners\n        {' '}\n      </a>\n      would be an understatement.\n    </p>\n\n    <p>\n      {' '}\n      This page will not go into a detailed explanation of the inner workings of\n      the\n      {' '}\n      <code>this</code>\n      {' '}\nkeyword. There's plenty of those to be found online\n      (I list some references at the bottom). Instead, I will try to give a\n      short explanation with every code example of what exactly is happening.\n    </p>\n\n    <p>\n      The idea for this site came up in a discussion on the\n      <a\n        href=\"https://syntax.fm/show/162/the-fundamentals-js\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {' '}\n        Syntax podcast\n      </a>\n      {' '}\n      on javascript fundamentals. I highly recommend the podcast to anyone\n      starting out in front end development!\n    </p>\n\n    <p>Some references, in no particular order</p>\n    <dl>\n      <dt>\n        <a\n          href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          MDN documentation\n        </a>\n      </dt>\n      <dd>As always, the MDN docs should be the first place to go to.</dd>\n      <dt>\n        <a\n          href=\"http://www.digital-web.com/articles/scope_in_javascript/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Mike West on javascript scope\n        </a>\n      </dt>\n      <dd>\n        This article explains the mechanics of\n        {' '}\n        <code>this</code>\n        {' '}\nin the wider\n        context of javascript scoping.\n      </dd>\n      <dt>\n        <a\n          href=\"https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Gentle explanation of\n          {' '}\n          <code>this</code>\n          {' '}\nkeyword in javascript\n        </a>\n      </dt>\n      <dd>A long but excellent and detailed description by Dmitri Pavlutin.</dd>\n    </dl>\n  </div>\n);\n\nconst correctContent = (\n  <div>\n    <h1>Correct!</h1>\n    <p>You seem to be getting a hang of it. Or was it just a fluke?</p>\n  </div>\n);\n\nconst incorrectContent = (\n  <div>\n    <h1>Wrong!</h1>\n    <p> Looks like you&apos;re still unclear about some things.</p>\n  </div>\n);\n\nexport { aboutContent, correctContent, incorrectContent };\n","import React from 'react';\nimport CodeField from './CodeField';\nimport ButtonPanel from './ButtonPanel';\nimport Modal from './Modal';\nimport questions from './questions';\nimport { aboutContent, correctContent, incorrectContent } from './content';\nimport './App.sass';\n\nfunction getQuestion() {\n  return questions[Math.floor(Math.random() * questions.length)];\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const question = getQuestion();\n\n    this.state = {\n      view: 'main',\n      codesnippet: question.codesnippet,\n      options: question.options,\n      correct: question.correct,\n      explanation: question.explanation,\n    };\n\n    this.openAbout = this.openAbout.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.checkAnswer = this.checkAnswer.bind(this);\n    this.showExplanation = this.showExplanation.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.getModal = this.getModal.bind(this);\n  }\n\n  getModal(view) {\n    const { explanation } = this.state;\n    switch (view) {\n      case 'correct':\n        return (\n          <Modal\n            type=\"answer\"\n            content={correctContent}\n            closeHandler={this.closeModal}\n            explanationHandler={this.showExplanation}\n            nextHandler={this.nextQuestion}\n          />\n        );\n      case 'incorrect':\n        return (\n          <Modal\n            type=\"answer\"\n            content={incorrectContent}\n            closeHandler={this.closeModal}\n            explanationHandler={this.showExplanation}\n            nextHandler={this.nextQuestion}\n          />\n        );\n      case 'explanation':\n        // We pass the 'view' as a key to the explanation modal. This is\n        // a complete hack, but by changing the key of the modal, we forcefully\n        // trigger an update.\n        return (\n          <Modal\n            type=\"explanation\"\n            content={explanation}\n            closeHandler={this.closeModal}\n            nextHandler={this.nextQuestion}\n            key={view}\n          />\n        );\n      case 'about':\n        return (\n          <Modal\n            type=\"about\"\n            content={aboutContent}\n            closeHandler={this.closeModal}\n          />\n        );\n      default:\n        return null;\n    }\n  }\n\n  nextQuestion() {\n    const {\n      codesnippet, options, correct, explanation,\n    } = getQuestion();\n    this.setState({\n      view: 'main',\n      codesnippet,\n      options,\n      correct,\n      explanation,\n    });\n  }\n\n  checkAnswer(str) {\n    const { correct } = this.state;\n    if (str === correct) {\n      return () => this.setState({ view: 'correct' });\n    }\n    return () => this.setState({ view: 'incorrect' });\n  }\n\n  showExplanation() {\n    this.setState({ view: 'explanation' });\n    this.forceUpdate();\n  }\n\n  openAbout() {\n    this.setState({ view: 'about' });\n  }\n\n  closeModal() {\n    this.setState({ view: 'main' });\n  }\n\n  render() {\n    const { view, options, codesnippet } = this.state;\n    // We pass the 'codesnippet' as a key to the CodeField. This is\n    // a complete hack, but by changing the key of the modal, we forcefully\n    // trigger an update.\n    return (\n      <div className=\"App\">\n        <header>\n          {'What is '}\n          <span className=\"header__this\">this</span>\n          {'?'}\n        </header>\n        <main>\n          <CodeField key={codesnippet} content={codesnippet} />\n          <ButtonPanel options={options} answerHandler={this.checkAnswer} />\n        </main>\n        <footer>\n          <button\n            type=\"button\"\n            className=\"footer__about\"\n            onClick={this.openAbout}\n          >\n            {'No, seriously, what is this?'}\n          </button>\n        </footer>\n        {this.getModal(view)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './common.sass';\nimport './index.sass';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}